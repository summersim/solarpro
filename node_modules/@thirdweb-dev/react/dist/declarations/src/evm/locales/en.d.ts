import { ThirdwebLocale } from "./types";
import { DeepPartial } from "../utils/applyOverrides";
export declare function enDefault(): {
    connectWallet: {
        signIn: string;
        defaultButtonTitle: string;
        connecting: string;
        switchNetwork: string;
        switchingNetwork: string;
        defaultModalTitle: string;
        recommended: string;
        installed: string;
        continueAsGuest: string;
        connectAWallet: string;
        newToWallets: string;
        getStarted: string;
        guest: string;
        send: string;
        receive: string;
        currentNetwork: string;
        switchAccount: string;
        requestTestnetFunds: string;
        transactionHistory: string;
        backupWallet: string;
        guestWalletWarning: string;
        switchTo: string;
        connectedToSmartWallet: string;
        confirmInWallet: string;
        disconnectWallet: string;
        copyAddress: string;
        personalWallet: string;
        smartWallet: string;
        or: string;
        download: {
            chrome: string;
            android: string;
            iOS: string;
        };
        welcomeScreen: {
            defaultTitle: string;
            defaultSubtitle: string;
        };
        agreement: {
            prefix: string;
            termsOfService: string;
            and: string;
            privacyPolicy: string;
        };
        networkSelector: {
            title: string;
            mainnets: string;
            testnets: string;
            allNetworks: string;
            addCustomNetwork: string;
            inputPlaceholder: string;
            categoryLabel: {
                recentlyUsed: string;
                popular: string;
                others: string;
            };
            loading: string;
            failedToSwitch: string;
        };
        receiveFundsScreen: {
            title: string;
            instruction: string;
        };
        sendFundsScreen: {
            title: string;
            submitButton: string;
            token: string;
            sendTo: string;
            amount: string;
            successMessage: string;
            invalidAddress: string;
            noTokensFound: string;
            searchToken: string;
            transactionFailed: string;
            transactionRejected: string;
            insufficientFunds: string;
            selectTokenTitle: string;
            sending: string;
        };
        signatureScreen: {
            instructionScreen: {
                title: string;
                instruction: string;
                signInButton: string;
            };
            signingScreen: {
                title: string;
                prompt: string;
                promptForSafe: string;
                approveTransactionInSafe: string;
                tryAgain: string;
                failedToSignIn: string;
                inProgress: string;
            };
        };
    };
    wallets: {
        walletConnect: {
            scanInstruction: string;
        };
        smartWallet: {
            connecting: string;
            failedToConnect: string;
            wrongNetworkScreen: {
                title: string;
                subtitle: string;
                failedToSwitch: string;
            };
        };
        safeWallet: {
            connectWalletScreen: {
                title: string;
                subtitle: string;
                learnMoreLink: string;
            };
            accountDetailsScreen: {
                title: string;
                findSafeAddressIn: string;
                dashboardLink: string;
                network: string;
                selectNetworkPlaceholder: string;
                invalidChainConfig: string;
                failedToConnect: string;
                failedToSwitch: string;
                switchNetwork: string;
                switchingNetwork: string;
                connectToSafe: string;
                connecting: string;
                mainnets: string;
                testnets: string;
                safeAddress: string;
            };
        };
        coinbaseWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        metamaskWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        okxWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        phantomWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        rainbowWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        trustWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        zerionWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        coreWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        oneKeyWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        cryptoDefiWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        rabbyWallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        coin98Wallet: {
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
        paperWallet: {
            signIn: string;
            signInWithGoogle: string;
            emailPlaceholder: string;
            submitEmail: string;
            invalidEmail: string;
            emailRequired: string;
            googleLoginScreen: {
                title: string;
                instruction: string;
                failed: string;
                retry: string;
            };
            emailLoginScreen: {
                title: string;
                enterCodeSendTo: string;
                newDeviceDetected: string;
                enterRecoveryCode: string;
                invalidCode: string;
                invalidCodeOrRecoveryCode: string;
                verify: string;
                failedToSendCode: string;
                sendingCode: string;
                resendCode: string;
            };
        };
        embeddedWallet: {
            signInWithGoogle: string;
            signInWithFacebook: string;
            signInWithApple: string;
            emailPlaceholder: string;
            submitEmail: string;
            signIn: string;
            emailRequired: string;
            invalidEmail: string;
            socialLoginScreen: {
                title: string;
                instruction: string;
                failed: string;
                retry: string;
            };
            emailLoginScreen: {
                title: string;
                enterCodeSendTo: string;
                newDeviceDetected: string;
                enterRecoveryCode: string;
                invalidCode: string;
                invalidCodeOrRecoveryCode: string;
                verify: string;
                failedToSendCode: string;
                sendingCode: string;
                resendCode: string;
            };
            createPassword: {
                title: string;
                instruction: string;
                saveInstruction: string;
                inputPlaceholder: string;
                confirmation: string;
                submitButton: string;
                failedToSetPassword: string;
            };
            enterPassword: {
                title: string;
                instruction: string;
                inputPlaceholder: string;
                submitButton: string;
                wrongPassword: string;
            };
        };
        magicLink: {
            signIn: string;
            loginWith: string;
            submitEmail: string;
            loginWithEmailOrPhone: string;
            emailOrPhoneRequired: string;
            loginWithPhone: string;
            phoneRequired: string;
            invalidEmail: string;
            invalidPhone: string;
            invalidEmailOrPhone: string;
            countryCodeMissing: string;
            emailPlaceholder: string;
            emailRequired: string;
        };
        localWallet: {
            passwordLabel: string;
            confirmPasswordLabel: string;
            enterYourPassword: string;
            warningScreen: {
                title: string;
                warning: string;
                backupWallet: string;
            };
            reconnectScreen: {
                title: string;
                savedWallet: string;
                continue: string;
                createNewWallet: string;
            };
            createScreen: {
                instruction: string;
                importWallet: string;
                createNewWallet: string;
                connecting: string;
            };
            exportScreen: {
                description1: string;
                description2: string;
                walletAddress: string;
                download: string;
                title: string;
            };
            importScreen: {
                title: string;
                description1: string;
                description2: string;
                import: string;
                uploadJSON: string;
                uploadedSuccessfully: string;
            };
        };
        frameWallet: {
            connectionFailedScreen: {
                title: string;
                description: string;
                downloadFrame: string;
                supportLink: string;
            };
            connectionScreen: {
                inProgress: string;
                failed: string;
                instruction: string;
                retry: string;
            };
            getStartedScreen: {
                instruction: string;
            };
            scanScreen: {
                instruction: string;
            };
            getStartedLink: string;
        };
    };
};
/**
 * Calling this function will return the default English locale object to be set on [`ThirdwebProvider`](https://portal.thirdweb.com/react/v4/ThirdwebProvider) to localize the thirdweb components.
 *
 * You can also overrides parts of the default locale object by passing an object with the same structure as the default locale object and only those parts will be overridden.
 *
 * @example
 * ### Use default Locale
 * ```tsx
 * const english = en();
 * ```
 *
 * ### Override Locale
 * ```ts
 * const english = en({
 *  connectWallet: {
 *    signIn: "Sign in!"
 *  }
 * })
 * ```
 *
 * Pass it to [`ThirdwebProvider`](https://portal.thirdweb.com/react/v4/ThirdwebProvider)'s `locale` prop to localize the thirdweb components.
 *
 * ```tsx
 * function Example() {
 *   return (
 *      <ThirdwebProvider locale={english}>
 *        <App />
 *      </ThirdwebProvider>
 *    )
 * }
 * ```
 *
 * @locale
 */
export declare function en(overrides?: DeepPartial<ThirdwebLocale>): ThirdwebLocale;
//# sourceMappingURL=en.d.ts.map